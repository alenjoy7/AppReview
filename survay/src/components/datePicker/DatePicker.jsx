import { useRef } from "react";

import { format } from "date-fns";
import PropTypes from "prop-types";
import { CalendarIcon } from "lucide-react";

import { cn } from "@/lib/utils";

import { Button } from "../ui/button";
import { FormControl } from "../ui/form";
import { Calendar } from "../ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "../ui/popover";

/**
 * datepicker component to get the date
 * @param {*} param0
 * @returns datepicker
 */
const DatePicker = ({ field }) => {
  const calenderPopover = useRef(null);
  /**
   * This function is used to update the calender value and close calender
   * @param {*} event is the event generated by the feild
   * @param {*} field is object from the use hook form for setting value
   */
  const handleOnSelectInCalendar = (event, field) => {
    field.onChange(event);
    calenderPopover?.current?.click();
  };
  return (
    <Popover>
      <PopoverTrigger asChild ref={calenderPopover}>
        <FormControl>
          <Button
            variant={"outline"}
            className={cn(
              "w-full pl-3 text-left font-normal",
              !field.value && "text-muted-foreground"
            )}
          >
            {field.value ? (
              format(field.value, "PPP")
            ) : (
              <span>Pick a date</span>
            )}
            <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
          </Button>
        </FormControl>
      </PopoverTrigger>
      <PopoverContent className="w-auto p-0" align="start">
        <Calendar
          mode="single"
          selected={field.value}
          onSelect={(event) => handleOnSelectInCalendar(event, field)}
          required
          disabled={(date) =>
            date > new Date() || date < new Date("1900-01-01")
          }
          captionLayout="dropdown-buttons"
          fromYear={1900}
          toYear={new Date().getFullYear()}
          initialFocus
        />
      </PopoverContent>
    </Popover>
  );
};

DatePicker.propTypes = {
  field: PropTypes.shape({
    onChange: PropTypes.any,
    value: PropTypes.any,
  }),
};

export default DatePicker;
